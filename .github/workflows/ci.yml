name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ stable, productive ]
  pull_request:
    branches: [ stable, productive ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 #to ensure to retrive everything for version lookup

      # Setup powershell
      - name: Setup powershell
        run: sh ./.github/scripts/install-powershell.sh

      # setup dotnet with dotnet core 3.1
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x' # SDK Version to use.

      # setup dotnet with .NET 5.0
      - name: Setup .NET 5.0
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x' # SDK Version to use.

      # Set version suffix
      - name: Set Version SUFFIX for Release
        if: github.ref == 'refs/heads/productive' 
        run: pwsh ./.github/scripts/replace.ps1 -path * -placeholder SUFFIX -value ''

      - name: Set Version SUFFIX for BETA build
        if: github.ref == 'refs/heads/deploy'
        run: pwsh ./.github/scripts/replace.ps1 -path * -placeholder SUFFIX -value '-beta'

      - name: Set Version SUFFIX for ALPHA build
        if: github.ref != 'refs/heads/productive' && github.ref != 'refs/heads/deploy' 
        run: pwsh ./.github/scripts/replace.ps1 -path * -placeholder SUFFIX -value '-alpha'
      
      # Parse lit git templates
      - name: LitGit parse templates
        run: pwsh ./.github/scripts/parse-template.ps1 -path * -litgit ./.github/LitGit/LitGit.ps1 -config ./.github/configs/VaVare.nuspec.config
        
      # Restore all dependecies
      - name: Restore dependencies
        run: dotnet restore
      
      # Build the hole solution
      - name: Build
        run: dotnet build -c Release --no-restore
      
      # Run Unit tests
      - name: Test
        run: dotnet test -c Release --no-build --verbosity normal
      
      # Create nupkg
      - name: Pack extension
        if: github.event_name == 'push'
        run: pwsh -File ./.github/scripts/pack-files.ps1 -path *
      
      # Setup Nuget
      - name: Setup NuGet.exe
        if: github.event_name == 'push' && (github.ref == 'refs/heads/productive' || github.ref == 'refs/heads/deploy' || github.ref == 'refs/heads/stable' )
        # You may pin to the exact commit or the version.
        # uses: NuGet/setup-nuget@04b0c2b8d1b97922f67eca497d7cf0bf17b8ffe1
        uses: NuGet/setup-nuget@v1.0.5
        with:
          # NuGet version to install. Can be `latest`, `preview`, a concrete version like `5.3.1`, or a semver range specifier like `5.x`.
          # nuget-version: # optional, default is latest
          # NuGet API Key to configure.
          nuget-api-key: ${{secrets.NUGET_API_KEY}}
          # Source to scope the NuGet API Key to.
          # nuget-api-key-source: # optional

      # Push nuget packages
      - name: Publish packages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/productive' || github.ref == 'refs/heads/deploy' || github.ref == 'refs/heads/stable' )
        run: nuget push "**/*.nupkg" -src https://api.nuget.org/v3/index.json